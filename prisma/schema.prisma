generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  PASSWORD
  GOOGLE
}

enum UserRole {
  ADMINISTRATOR
  USER
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  imageUrl         String?
  stripeCustomerId String?
  name             String
  password         String?
  provider         Provider  @default(PASSWORD)
  role             UserRole  @default(USER)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?

  members           Member[]
  transactions      Transaction[]
  organizationUsers OrganizationUser[]
  invitations       Invitation[]
}

enum OrganizationUserRole {
  ADMINISTRATOR
}

model Invitation {
  id              String               @id @default(uuid())
  email           String
  organizationId  String
  role            OrganizationUserRole
  invitedByUserId String
  token           String
  acceptedAt      DateTime?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  deletedAt       DateTime?

  organization Organization @relation(fields: [organizationId], references: [id])

  user User @relation(fields: [invitedByUserId], references: [id])
}

model OrganizationUser {
  id             String               @id @default(uuid())
  organizationId String
  userId         String
  role           OrganizationUserRole @default(ADMINISTRATOR)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  deletedAt      DateTime?

  organization Organization @relation(fields: [organizationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
}

model Member {
  id                  String       @id @default(uuid())
  user                User?        @relation(fields: [userId], references: [id])
  userId              String?      @unique
  addressId           String?
  phoneNumber         String?
  note                String       @default("")
  email               String?
  firstName           String
  lastName            String       @default("")
  organizationId      String
  imageUrl            String?
  organization        Organization @relation(fields: [organizationId], references: [id])
  membershipExpiresAt DateTime?
  formattedAddress    String?
  isMembershipActive  Boolean      @default(true)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  deletedAt           DateTime?

  address Address? @relation(fields: [addressId], references: [id])
  orders  Order[]
}

model Organization {
  id                String  @id @default(uuid())
  name              String
  email             String
  addressId         String?
  description       String?
  imageUrl          String?
  imageCardBackUrl  String?
  imageCardFrontUrl String?
  formattedAddress  String?

  stripeCustomerId String?

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  address           Address?           @relation(fields: [addressId], references: [id])
  organizationUsers OrganizationUser[]
  members           Member[]
  invitations       Invitation[]
  paymentMethods    PaymentMethod[]
}

model Address {
  id               String         @id @default(uuid())
  unit             String?
  formattedAddress String
  streetNumber     String?
  streetName       String?
  city             String?
  region           String?
  postalCode       String?
  country          String
  latitude         Float
  longitude        Float
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deletedAt        DateTime?
  members          Member[]
  organizations    Organization[]
}

enum TransactionStatus {
  PENDING
  SUCCEEDED
  FAILED
}

model Transaction {
  id                    String            @id @default(uuid())
  userId                String
  user                  User              @relation(fields: [userId], references: [id])
  amount                Float
  currency              String            @default("EUR")
  stripeSessionId       String
  stripePaymentIntentId String?
  status                TransactionStatus @default(PENDING)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  deletedAt             DateTime?

  orders Order[]
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  FAILED
}

model Order {
  id            String      @id @default(uuid())
  transactionId String?
  memberId      String
  status        OrderStatus @default(PENDING)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  transaction Transaction? @relation(fields: [transactionId], references: [id])
  member      Member       @relation(fields: [memberId], references: [id])
}

model PaymentMethod {
  id                    String  @id @default(uuid())
  organizationId        String
  stripePaymentMethodId String
  lastFourDigits        String
  expMonth              Int
  expYear               Int
  isDefault             Boolean @default(true)
  brand                 String  @default("visa")
  country               String  @default("FR")
  name                  String?
  email                 String?
  phoneNumber           String?

  organization Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([stripePaymentMethodId])
}
